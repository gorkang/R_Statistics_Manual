[
["Visualizar-datos.html", "Chapter 7 Visualizar datos 7.1 TODO 7.2 Que gráfica puedo usar (WIP) 7.3 Tipos de gráficas", " Chapter 7 Visualizar datos 7.1 TODO Some interesting simple ideas here http://pythonplot.com/ TABLA RESUMEN CON IMAGENES DE GRAFICAS WHY Data visualization matters: https://www.autodeskresearch.com/publications/samestats Vamos a usar la siguiente base de datos. R es un lenguaje especialmente potente para la visualización de datos. Librerias como ggplot2 permiten una cantidad abrumadora de opciones. Aqui presentamos ejemplos de algunas de las posibilidades de R. 7.2 Que gráfica puedo usar (WIP) * Image FROM Modern Dive DV/IV IV continua IV vategórica IV dicotómica DV continua SCATTER PIRATE CORREL PIRATE CAJA BEAN DENSITY PIRATE DV categórica … PIRATE … DV dicotómica … … … Cargamos librerias y leemos datos # Cargamos librerias if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(tidyverse, yarrr) # Leemos datos y echamos un vistazo datos = read_csv(&quot;Data/06_Visualize_data/Visualize_data.csv&quot;); datos ## # A tibble: 103 x 7 ## ID Genero Edad Educacion FollowUP condition PPV_DECLARED ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 1 1 47 8 80 PPV_Cond1 99 ## 2 2 2 21 6 90 PPV_Cond1 99 ## 3 3 2 29 6 10 PPV_Cond1 99 ## 4 4 2 27 7 75 PPV_Cond1 1 ## 5 5 1 29 5 35 PPV_Cond1 24 ## 6 6 2 28 6 14 PPV_Cond1 99 ## 7 7 2 27 4 2 PPV_Cond1 99 ## 8 8 2 55 6 89 PPV_Cond1 99 ## 9 9 2 28 6 6 PPV_Cond1 99 ## 10 10 1 46 5 0 PPV_Cond1 1 ## # ... with 93 more rows # A algunas de las funciones no les gustan las tibbles! datos2 = read.csv(&quot;Data/06_Visualize_data/Visualize_data.csv&quot;) Nota sobre sintaxis En muchos de los gráficos, análisis estadísticos, etc, usaremos la sintaxis: Var_Dep ~ Var_Indep_1 + Var_Indep_2 7.3 Tipos de gráficas 7.3.1 Histogramas La función hist() nos permite crear de manera muy sencilla histogramas para ver # Histograma sencillo hist(datos$Edad) # Dotplot histogram qplot(datos$Edad, geom=&quot;dotplot&quot;, fill = I(&quot;forestgreen&quot;), xlab = &quot;Age&quot;, main = &quot;Age dotplot histogram&quot;) ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. Si queremos ver los histogramas de todas las variables numéricas de nuestro dataset: # Metodo 1 if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(plyr, psych) # multi.hist(datos) #error, not numeric multi.hist(datos[,sapply(datos, is.numeric)]) # Metodo 2 p_load(reshape2, ggplot2) d &lt;- melt(datos) ## Using condition as id variables ggplot(d,aes(x = value)) + facet_wrap(~variable,scales = &quot;free_x&quot;) + geom_histogram(bins = 15) #+ coord_cartesian(ylim = c(0, 100)) 7.3.2 Pirate plot Ver la web del creador: Pirate plot y su página de Github # Cargamos librerias if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(yarrr) # Mostramos gráfico con opciones por defecto pirateplot(formula = PPV_DECLARED ~ condition, datos) # Personalizamos el gráfico pirateplot(formula = PPV_DECLARED ~ condition, data = datos, main = &quot;PPV by condition&quot;, avg.line.fun = median, #theme.o = 2, jitter.val = .2, inf.method = &quot;ci&quot;, #Show confidence interval (95%) inf.f.o = 0.2, #Opacity of ci pal = &quot;appletv&quot;) 7.3.3 Diagrama de caja y bigotes boxplot(PPV_DECLARED ~ condition, datos) 7.3.4 Correlation plot Ver la web del paquete: Correlation plot y su página de Github # Cargamos libreria if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(corrplot) corrplot(cor(datos[,c(2:5,7)]), mar = c(1,0, 0, 0),tl.cex = 0.9, method = &quot;square&quot;, type = &quot;lower&quot;, tl.col = &quot;black&quot;, diag = T) 7.3.5 Beanplot Ver la web del paquete Beanplot # Cargamos libreria if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(beanplot) beanplot(FollowUP ~ Genero, data = datos, side = &quot;both&quot;, log = &quot;&quot;, names = c(&quot;Hombre&quot;,&quot;Mujer&quot;), what = c(1,1,1,0), border = NA, col = list(&quot;black&quot;, c(&quot;grey&quot;, &quot;white&quot;))) # legend(&quot;bottomleft&quot;, fill = c(&quot;black&quot;, &quot;grey&quot;), legend = c(&quot;H&quot;, &quot;M&quot;), title = &quot;Genero&quot;) 7.3.6 Scatterplot Ver la web del creador: ggpubr y su página de Github # Cargamos libreria if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(ggpubr) ggscatter(datos2, x = &quot;Educacion&quot;, y = &quot;Edad&quot;, color = &quot;black&quot;, shape = 21, size = 4, # Points color, shape and size add = &quot;reg.line&quot;, # Add regressin line add.params = list(color = &quot;blue&quot;, fill = &quot;lightgray&quot;), # Customize reg. line conf.int = TRUE, # Add confidence interval cor.coef = TRUE # Add correlation coefficient ) 7.3.7 Scatterplot con 3 variables Ver la web de documentación de ggplot2 y su página de Github # Cargamos libreria if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(tidyverse) ggplot(datos, aes(PPV_DECLARED, FollowUP, color=factor(Genero))) + geom_point(shape=1, size = 2) + scale_colour_hue(l=50) + # Palette hue geom_smooth(method=lm, # Linear regression lines se=T, # Confidence interval fullrange=F) # Extend regression lines 7.3.8 Multiple Scatterplots if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(tidyverse, ggthemes, Rmisc) a = read_csv(&quot;Data/06_Visualize_data/data_multiple_scatterplot.csv&quot;) ## Parsed with column specification: ## cols( ## ID = col_integer(), ## `Executive functions` = col_double(), ## `Emotional recognition` = col_integer(), ## ToM = col_integer(), ## `Inhibitory verbal control` = col_integer(), ## `Cryst.Intellig.1 (vocab.)` = col_integer(), ## `Cryst. Intellig.2 (years of studies)` = col_integer(), ## `Fluid intelligence` = col_integer(), ## `Social adaptation` = col_integer(), ## Age = col_integer() ## ) # Si se cambia alguno de estos nombres, cambiar tb abajo (o mejor, find and replace all!) colnames(a) = c(&quot;a&quot;, &quot;Executive functions&quot;, &quot;Emotional recognition&quot;, &quot;ToM&quot;, &quot;Inhibitory verbal control&quot;, &quot;Cryst. Intellig. (vocab)&quot;, &quot;Cryst. Intellig. (years of education)&quot;, &quot;Fluid intelligence&quot;, &quot;w&quot;, &quot;gg&quot;) p1 = ggplot(a, aes(x = `Cryst. Intellig. (vocab)`, y = `Executive functions`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank()) p2 = ggplot(a, aes(x = `Cryst. Intellig. (vocab)`, y = `Emotional recognition`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank()) p3 = ggplot(a, aes(x = `Cryst. Intellig. (vocab)`, y = ToM)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank()) p4 = ggplot(a, aes(x = `Cryst. Intellig. (vocab)`, y = `Inhibitory verbal control`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() p5 = ggplot(a, aes(x = `Cryst. Intellig. (years of education)`, y = `Executive functions`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p6 = ggplot(a, aes(x = `Cryst. Intellig. (years of education)`, y = `Emotional recognition`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p7 = ggplot(a, aes(x = `Cryst. Intellig. (years of education)`, y = ToM)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p8 = ggplot(a, aes(x = `Cryst. Intellig. (years of education)`, y = `Inhibitory verbal control`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.y=element_blank()) p9 = ggplot(a, aes(x = `Fluid intelligence`, y = `Executive functions`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p10 = ggplot(a, aes(x = `Fluid intelligence`, y = `Emotional recognition`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p11 = ggplot(a, aes(x = `Fluid intelligence`, y = ToM)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.x=element_blank(), axis.title.y=element_blank()) p12 = ggplot(a, aes(x = `Fluid intelligence`, y = `Inhibitory verbal control`)) + geom_point(shape=16, fill=&quot;darkgrey&quot;, color=&quot;black&quot;, size=2) + geom_smooth(method=lm, fill=&quot;grey&quot;, color=&quot;black&quot;, se = F, size = .5) + theme_tufte() + theme(axis.title.y=element_blank()) multiplot(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, cols=3) ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). 7.3.9 Density plots Ver la web del creador: ggpubr y su página de Github The variable we use to create two different sub-plots has to be a factor! if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(tidyverse, ggpubr) datos = read_csv(&quot;Data/06_Visualize_data/Visualize_data.csv&quot;) ## Parsed with column specification: ## cols( ## ID = col_integer(), ## Genero = col_integer(), ## Edad = col_integer(), ## Educacion = col_integer(), ## FollowUP = col_integer(), ## condition = col_character(), ## PPV_DECLARED = col_integer() ## ) datos = datos %&gt;% mutate(Genero = as.factor(unlist(Genero))) %&gt;% #Make Genero a factor mutate(PPV_DECLARED = as.numeric(unlist(PPV_DECLARED))) ggdensity(datos, x = &quot;PPV_DECLARED&quot;, add = &quot;mean&quot;, rug = TRUE, color = &quot;Genero&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;), fill = &quot;Genero&quot;) 7.3.10 ggjoy Plots if (!require(&#39;pacman&#39;)) install.packages(&#39;pacman&#39;); library(&#39;pacman&#39;) p_load(tidyverse, ggridges) datos2 = datos %&gt;% drop_na() %&gt;% filter(Educacion &lt; 8) %&gt;% mutate(Educacion = as.factor(Educacion)) %&gt;% mutate(PPV_DECLARED = as.double(PPV_DECLARED)) # datos2 %&gt;% group_by(Genero) %&gt;% dplyr::summarise(N = n()) # Simple version ggplot(datos2, aes(x = FollowUP, y = Genero)) + geom_density_ridges(scale = 2) ## Picking joint bandwidth of 12.4 # Tweak some aesthetics ggplot(datos2, aes(x = FollowUP, y = Genero, fill = Genero)) + geom_density_ridges(scale = 2, alpha = .7, color = &quot;white&quot;) + scale_fill_hue(l=30) ## Picking joint bandwidth of 12.4 # Histogram stat ggplot(datos2, aes(x = FollowUP, y = Genero, fill = Genero)) + geom_density_ridges(scale = 2, alpha = .7, color = &quot;white&quot;, stat = &quot;binline&quot;, bins = 20) + scale_fill_hue(l=30) # Combined ggplot(datos2, aes(x = FollowUP, y = Genero, fill = Genero)) + geom_density_ridges(scale = 2, alpha = .7, color = &quot;white&quot;, stat = &quot;binline&quot;, bins = 20) + geom_density_ridges(scale = 2, alpha = .4, color = &quot;white&quot;) + scale_fill_hue(l=30) ## Picking joint bandwidth of 12.4 "]
]
